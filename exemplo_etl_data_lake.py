# -*- coding: utf-8 -*-
"""EXEMPLO_ETL - DATA LAKE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CJb_Uu-DADE508jPOvqN-RGmGJjAIU8b
"""

import pandas as pd
import numpy as np
import os

#
if not os.path.exists('data_lake'):
    os.makedirs('data_lake')

#
num_files = 10
num_rows_per_file = 1000

#
dfs = []

#
for i in range(num_files):
    #
    data = {
        'coluna1': np.random.randint(0, 100, num_rows_per_file),
        'coluna2': np.random.randint(num_rows_per_file),
        'coluna3': np.random.choice(['A', 'B', 'C'], num_rows_per_file)
    }

#
df = pd.DataFrame(data)

#
file_name = f'data_lake/dados_{i+1}.csv'
df.to_csv(file_name, index=False)

#
dfs.append((file_name, df))

print("Dados do Data Lake gerados com sucesso")

#
for file_name, df in dfs:
  print(f"\nDados do arquivo: {file_name}\n")
  print(df.head())

import pandas as pd
import numpy as np
import os
from sqlalchemy import create_engine

#
if not os.path.exists('data_lake'):
  os.makedirs('data_lake')

#
num_files = 10
num_rows_per_file = 1000

#
dfs = []

#
for i in range(num_files):
  #
  data = {
      'coluna1': np.random.randint(0, 100, num_rows_per_file),
      'coluna2': np.random.randn(num_rows_per_file),
      'coluna3': np.random.choice(['A', 'B', 'C'], num_rows_per_file)
  }

  #
  df = pd.DataFrame(data)

#
file_name = f'data_lake/dados_{i+1}.csv'
df.to_csv(file_name, index=False)

#
dfs.append(df)

print("Dados do Data Lake gerados com sucesso!")

#
#
conn_string = 'sqlite:///data_lake.db'

#
engine = create_engine(conn_string)

#
for i, df in enumerate(dfs, 1):
  table_name = f'dados_{i}'
  df.to_sql(table_name, engine, index=False)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sqlalchemy import create_engine

#
conn_string = 'sqlite:///data_lake.db'
engine = create_engine(conn_string)

#
table_name = 'dados_1' #
df = pd.read_sql_table(table_name, engine)

#
print("Primeiras linhas do DataFrame:")
print(df.head())

#
print("\nInformações sobre o DataFrame:")
print(df.info())

#
print("\nResumo estatístico do DataFrame")
print(df.describe())

#
#
plt.figure(figsize=(8, 6))
sns.scatterplot(x='coluna1', y='coluna2', data=df)
plt.title('Gráfico de Dispersão entre coluna 1 e coluna2')
plt.xlabel('coluna1')
plt.ylabel('coluna2')
plt.grid(True)
plt.show()

#
plt.figure(figsize=(8, 6))
sns.histplot(df['coluna1'], bins=20, kde=True)
plt.title('Histograma da coluna1')
plt.xlabel('coluna1')
plt.ylabel('Frequência')
plt.grid(True)
plt.show()

#
plt.figure(figsize=(8, 6))
sns.boxplot(x='coluna3', y='coluna1', data=df)
plt.title('Boxplot da coluna3 em relação à coluna1')
plt.xlabel('coluna3')
plt.ylabel('coluna1')
plt.grid(True)
plt.show